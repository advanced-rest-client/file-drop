{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "The `<file-drop>` component will render a filed where the user can drop files or directories into it.\nUser can choose a fallback option to select a file using browser's open file dialog.\n\nWhen files are selected by the user the `file-accepted` will be fired and the\n`<file-drop>.file` will contain a file entry.\nIf `multiple` attribute is present then the `<file-drop>.file` will be always\nan array of entries. If not, multiple it will always be a single file entry.\n\nDepending on user input method and type of the file there are 3 possible types\nthat will be returned by `<file-drop>.file`\nDirectoryEntry - only when the user dropped a directory (not possible with file selector)\nFileEntry - if the user dropped a file into the element\nFile - only if the user selected file(s) via file input (without drop)\n\nThe array of files may contain both DirectoryEntry and FileEntry types but never File.\n\n### Example\n```\n<file-drop multiple accept=\"image/*\"></file-drop>\n```\n\nNote that due the limitations of web filesystem the accept attribute will not work when dropping a file.\n\n### Styling\n`<file-drop>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n| `--file-drop` | Mixin applied to the element | `{}` |\n| `--file-drop-zone-border-color` | A border color of the drop zone | `--paper-lime-300` |\n| `--file-drop-zone` | Mixin applied to the drop zone | `{}` |\n| `--file-drop-zone-border-color-active` | A border color of the active drop zone (files over the zone) | red |\n| `--file-drop-action-button` | Mixin applied to the main action button | `{}` |\n| `--file-drop-with-file` | Mixin applied to the container when the file is selected | `{}` |\n| `--file-drop-without-file` | Mixin applied to the container when the file is not selected | `{}` |\n\nThe element renders only file selector button when whe screen size is less than 1024px.\nIt means mobile device which can't make use of file drag and drop.",
      "summary": "",
      "path": "file-drop.js",
      "properties": [
        {
          "name": "dragging",
          "type": "boolean | null | undefined",
          "description": "True when file is dragged over the element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 6
            },
            "end": {
              "line": 149,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "multiple",
          "type": "boolean | null | undefined",
          "description": "Set to true if multiple files can be selected.\nIf not set only first file fille be selected.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 6
            },
            "end": {
              "line": 158,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "accept",
          "type": "string | null | undefined",
          "description": "A set of comma-separated strings, each of which is a valid MIME type,\nwith no parameters.\n\nCurrently this will not work for files dropped into the element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 166,
              "column": 6
            },
            "end": {
              "line": 166,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "file",
          "type": "Object | null | undefined",
          "description": "A file object(s) dropped into the element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 6
            },
            "end": {
              "line": 173,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "hasFile",
          "type": "boolean | null | undefined",
          "description": "True if the element received file(s).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 176,
              "column": 6
            },
            "end": {
              "line": 180,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 192,
              "column": 2
            },
            "end": {
              "line": 198,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 2
            },
            "end": {
              "line": 206,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "selectFile",
          "description": "Opens a file selector.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 211,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onDragEnter",
          "description": "Handler for dragenter event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 214,
              "column": 2
            },
            "end": {
              "line": 218,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onDragLeave",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 220,
              "column": 2
            },
            "end": {
              "line": 224,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onDragOver",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 225,
              "column": 2
            },
            "end": {
              "line": 229,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onDrop",
          "description": "Handler for drop event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 231,
              "column": 2
            },
            "end": {
              "line": 238,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_manualSelected",
          "description": "A handler called when the user manually selected the file (not by drag and drop)",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 241,
              "column": 2
            },
            "end": {
              "line": 248,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_processEntries",
          "description": "Called when the element receive a file.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 250,
              "column": 2
            },
            "end": {
              "line": 263,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "entries"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeMainSectionClass",
          "description": "Computes class name for dragging section.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 266,
              "column": 2
            },
            "end": {
              "line": 277,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dragging"
            },
            {
              "name": "hasFile"
            }
          ]
        },
        {
          "name": "_computeHasFile",
          "description": "Compute if the element received a file",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 279,
              "column": 2
            },
            "end": {
              "line": 281,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "file"
            }
          ]
        },
        {
          "name": "reset",
          "description": "Resets the state of the element to the default view.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 283,
              "column": 2
            },
            "end": {
              "line": 286,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 61,
          "column": 0
        },
        "end": {
          "line": 293,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "PolymerElement",
      "name": "UiElements.FileDrop",
      "attributes": [
        {
          "name": "dragging",
          "description": "True when file is dragged over the element.",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 6
            },
            "end": {
              "line": 149,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "multiple",
          "description": "Set to true if multiple files can be selected.\nIf not set only first file fille be selected.",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 6
            },
            "end": {
              "line": 158,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "accept",
          "description": "A set of comma-separated strings, each of which is a valid MIME type,\nwith no parameters.\n\nCurrently this will not work for files dropped into the element.",
          "sourceRange": {
            "start": {
              "line": 166,
              "column": 6
            },
            "end": {
              "line": 166,
              "column": 20
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "file",
          "description": "A file object(s) dropped into the element.",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 6
            },
            "end": {
              "line": 173,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "has-file",
          "description": "True if the element received file(s).",
          "sourceRange": {
            "start": {
              "line": 176,
              "column": 6
            },
            "end": {
              "line": 180,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "file-accepted",
          "description": "Fired when the file has been accepted and ready to use.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "dragging-changed",
          "description": "Fired when the `dragging` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "file-changed",
          "description": "Fired when the `file` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "file-drop"
    }
  ]
}
